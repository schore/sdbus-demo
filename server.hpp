
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__server_cpp__adaptor__H__
#define __sdbuscpp__server_cpp__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace net {
namespace Corp {
namespace MyApp {

class Frobber_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "net.Corp.MyApp.Frobber";

protected:
    Frobber_adaptor(sdbus::IObject& object)
        : object_(object)
    {
        object_.registerMethod("HelloWorld").onInterface(INTERFACE_NAME).withInputParamNames("greeting").withOutputParamNames("response").implementedAs([this](const std::string& greeting){ return this->HelloWorld(greeting); });
        object_.registerSignal("Notification").onInterface(INTERFACE_NAME).withParameters<std::vector<uint8_t>, int32_t, std::vector<std::string>>("icon_blob", "height", "messages");
        object_.registerProperty("Verbose").onInterface(INTERFACE_NAME).withGetter([this](){ return this->Verbose(); }).withSetter([this](const bool& value){ this->Verbose(value); });
    }

    ~Frobber_adaptor() = default;

public:
    void emitNotification(const std::vector<uint8_t>& icon_blob, const int32_t& height, const std::vector<std::string>& messages)
    {
        object_.emitSignal("Notification").onInterface(INTERFACE_NAME).withArguments(icon_blob, height, messages);
    }

private:
    virtual std::string HelloWorld(const std::string& greeting) = 0;

private:
    virtual bool Verbose() = 0;
    virtual void Verbose(const bool& value) = 0;

private:
    sdbus::IObject& object_;
};

}}} // namespaces

#endif
